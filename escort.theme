<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Core\StreamWrapper\StreamWrapperManager;

/**
 * Prepares variables for administration escort template.
 *
 * Default template: escort.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element.
 */
function template_preprocess_escort(&$variables) {
  $element = $variables['element'];

  // Prepare the escort attributes.
  $variables['attributes'] = $element['#attributes'];
  $variables['after'] = !empty($element['#after']) ? $element['#after'] : NULL;

  foreach (Element::children($element) as $prefix) {
    $variables['content'][$prefix] = $element[$prefix];
  }
}

/**
 * Prepares variables for administration escort template.
 *
 * Default template: escort-region.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element.
 */
function template_preprocess_escort_region(&$variables) {
  $element = $variables['element'];

  // Prepare the escort attributes.
  $variables['attributes'] = $element['#attributes'];
  $variables['after'] = !empty($element['#after']) ? $element['#after'] : NULL;

  foreach (Element::children($element) as $prefix) {
    $variables['content'][$prefix] = $element[$prefix];
  }
}

/**
 * Prepares variables for administration escort template.
 *
 * Default template: escort-section.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element.
 */
function template_preprocess_escort_section(&$variables) {
  $element = $variables['element'];

  // Prepare the escort attributes.
  $variables['attributes'] = $element['#attributes'];

  foreach (Element::children($element) as $prefix) {
    $variables['content'][$prefix] = $element[$prefix];
  }
}

/**
 * Prepares variables for administration escort template.
 *
 * Default template: escort-section.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element.
 */
function template_preprocess_escort_container(&$variables) {
  $element = $variables['element'];
  $variables['content'] = $element['children'];
  $variables['ops'] = !empty($element['ops']) ? $element['ops'] : '';
  if ($element['#derivative_plugin_id']) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('escort-id-' . $element['#derivative_plugin_id']);
  }
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('escort-type-' . $element['#base_plugin_id']);
}

/**
 * Prepares variables for escort templates.
 *
 * Default template: escort.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #escort, #configuration, #children, #plugin_id.
 */
function template_preprocess_escort_item(&$variables) {
  $element = $variables['element'];
  $config = $element['#configuration'];
  $variables['configuration'] = $config;
  $variables['plugin_id'] = $element['#plugin_id'];
  $variables['base_plugin_id'] = $element['#base_plugin_id'];
  $variables['derivative_plugin_id'] = $element['#derivative_plugin_id'];
  $variables['label'] = !empty($config['label_display']) ? $config['label'] : '';
  $variables['content'] = $element['content'];
  $variables['tag'] = !empty($element['#tag']) ? $element['#tag'] : 'div';
  $variables['is_escort_admin'] = $element['#is_escort_admin'];
  $variables['is_escort_temporary'] = $element['#is_escort_temporary'];
  $variables['prefix_attributes'] = [];

  $variables['image'] = '';
  // Image can be set within element content.
  if (!empty($element['#image'])) {
    $variables['image'] = $element['#image'];
  }
  // If image not set within content, it may also be set within configuration.
  else if (!empty($config['image'])) {
    $variables['image'] = $config['image'];
  }

  // Theme our image if it is a URL.
  if (!empty($variables['image']) && is_string($variables['image'])) {
    $scheme = StreamWrapperManager::getScheme($variables['image']);
    switch ($scheme) {
      case 'public':
      case 'private':
        $variables['prefix'][] = [
          '#theme' => 'image_style',
          '#style_name' => 'escort',
          '#uri' => $variables['image'],
        ];
        break;

      default:
        $variables['prefix'][] = [
          '#theme' => 'image',
          '#uri' => $variables['image'],
        ];
        break;
    }
    $variables['attributes']['class'][] = 'has-image';
    $variables['prefix_attributes']['class'][] = 'escort-image';
  }

  $variables['icon'] = '';
  // Icon can be set within element content.
  if (!empty($element['#icon'])) {
    $variables['icon'] = $element['#icon'];
  }
  // If icon not set within content, it may also be set within configuration.
  else if (!empty($config['icon'])) {
    $variables['icon'] = $config['icon'];
  }

  // Let micon theme our icon.
  if (!empty($variables['icon'])) {
    if (is_string($variables['icon'])) {
      $variables['icon'] = [$variables['icon']];
    }
    if (is_array($variables['icon'])) {
      // Multiple icon ids can be passed.
      foreach ($variables['icon'] as $icon) {
        if (is_string($icon)) {
          $variables['prefix'][] = [
            '#theme' => 'micon_icon',
            '#icon' => $icon,
          ];
        }
        // Render arrays can be passed as well.
        elseif (is_array($icon) && isset($icon['#theme'])) {
          $variables['prefix'][] = $icon;
        }
      }
    }
    $variables['attributes']['class'][] = 'has-icon';
    $variables['prefix_attributes']['class'][] = 'escort-icon';
  }

  // Add base class
  if ($variables['tag'] == 'a') {
    $variables['attributes']['class'][] = 'escort-link';
  }

  // Create a valid HTML ID and make sure it is unique.
  if (!empty($element['#id']) && empty($variables['content']['#escort_group'])) {
    $variables['attributes']['id'] = Html::getUniqueId('escort-item-' . $element['#id']);
  }

  // Proactively add aria-describedby if possible to improve accessibility.
  if ($variables['label'] && isset($variables['attributes']['role'])) {
    $variables['title_attributes']['id'] = Html::getUniqueId($variables['label']);
    $variables['attributes']['aria-describedby'] = $variables['title_attributes']['id'];
  }

  // Changes are needed if we are in admin mode.
  if ($variables['is_escort_admin'] && !$variables['is_escort_temporary']) {
    // Because ops contain links, we need to force the element tag to be a
    // div as nested links are face breaking.
    if ($variables['tag'] == 'a') {
      $variables['tag'] = 'div';
    }
  }
  $variables['prefix_attributes'] = new Attribute($variables['prefix_attributes']);
}
