<?php

/**
 * @file
 * Contains escort.module.
 */

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\NestedArray;

/**
 * Implements hook_theme().
 */
function escort_theme() {
  $themes['escort_wrapper'] = [
    'variables' => ['children' => NULL, 'attributes' => NULL],
    'file' => 'escort.theme',
  ];
  $themes['escort'] = [
    'render element' => 'element',
    'file' => 'escort.theme',
  ];
  $themes['escort_region'] = [
    'render element' => 'element',
    'file' => 'escort.theme',
  ];
  $themes['escort_section'] = [
    'render element' => 'element',
    'file' => 'escort.theme',
  ];
  $themes['escort_container'] = [
    'render element' => 'element',
    'file' => 'escort.theme',
  ];
  $themes['escort_item'] = [
    'render element' => 'element',
    'file' => 'escort.theme',
  ];
  $themes['escort_menu'] = [
    'variables' => ['menu_name' => NULL, 'items' => [], 'attributes' => []],
  ];
  return $themes;
}

/**
 * Implements hook_element_info_alter().
 */
function escort_element_info_alter(&$type) {
  if (isset($type['page'])) {
    if (!\Drupal::moduleHandler()->moduleExists('ux')) {
      $type['page']['#theme_wrappers']['escort_wrapper'] = [
        '#attributes' => ['class' => ['escort-wrapper', 'escort-wrapper-content']],
        '#weight' => -1000,
      ];
    }
  }
}

/**
 * Implements hook_ux_wrapper_alter().
 */
function escort_ux_wrapper_alter(&$wrapper) {
  $wrapper['#attributes']['class'][] = 'escort-wrapper';
}

/**
 * Return the escort render array.
 */
function escort_render() {
  $cacheable_metadata_list = [];
  $regions = \Drupal::service('escort.repository')->getEscortsPerRegion($cacheable_metadata_list);
  $escort = [
    '#type' => 'escort',
    '#access' => \Drupal::currentUser()->hasPermission('access escort'),
    '#weight' => -1001,
    '#cache' => [
      'keys' => ['escort'],
      'tags' => ['config:escort_list', 'config:escort.config'],
      'contexts' => ['user.permissions'],
    ],
  ];
  $merged_cacheable_metadata = CacheableMetadata::createFromRenderArray($escort);
  foreach ($cacheable_metadata_list as $regions) {
    foreach ($regions as $cacheable_metadata) {
      $merged_cacheable_metadata = $merged_cacheable_metadata->merge($cacheable_metadata);
    }
  }
  $merged_cacheable_metadata->applyTo($escort);
  return $escort;
}

/**
 * Implements hook_page_top().
 *
 * Add admin escort to the bottom of the page automatically.
 */
function escort_page_top(array &$page_top) {
  $page_top['escort'] = escort_render();
}

/**
 * Implements hook_preprocess_block().
 */
function escort_preprocess_block(&$variables) {
  if (!empty($variables['elements']['#plugin_id']) && $variables['elements']['#plugin_id'] == 'local_tasks_block') {
    // Hide local tasks block if user can use escort AND the local tasks plugin
    // is enabled.
    if (\Drupal::currentUser()->hasPermission('access escort') && \Drupal::service('escort.repository')->hasEscortOfType('local_tasks')) {
      $variables['content']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function escort_preprocess_html(&$variables) {
  if (\Drupal::currentUser()->hasPermission('access escort')) {
    // Add classes to body if regions have escorts.
    $regions = \Drupal::service('escort.repository')->getEscortsPerRegion();
    if (!empty($regions)) {
      $is_admin = $variables['user']->hasPermission('administer escort') && \Drupal::service('escort.path.matcher')->isAdmin();
      $config = \Drupal::config('escort.config')->get('regions');
      $variables['attributes']['class'][] = 'has-escort';
      if ($is_admin) {
        $variables['attributes']['class'][] = 'is-escort-admin';
        $variables['#attached']['library'][] = 'escort/escort.admin';
      }
      foreach ($regions as $group_id => $sections) {
        $variables['attributes']['class'][] = Html::cleanCssIdentifier('has-escort-' . $group_id);
        if (!empty($config[$group_id]['icon_only'])) {
          $variables['attributes']['class'][] = Html::cleanCssIdentifier('escort-' . $group_id . '-icon-only');
        }
        if (!empty($config[$group_id]['expanded'])) {
          $variables['attributes']['class'][] = Html::cleanCssIdentifier('escort-' . $group_id . '-full');
        }
        foreach ($sections as $section) {
          foreach ($section as $escort) {
            // Allow plugins to add body attributes.
            if ($attributes = $escort->getPlugin()->getBodyAttributes($is_admin)) {
              $variables['attributes'] = NestedArray::mergeDeep($variables['attributes'], $attributes);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function escort_entity_type_alter(array &$entity_types) {
  // @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[]
  if (isset($entity_types['node'])) {
    $entity_types['node']->setHandlerClass('escort_list_builder', 'Drupal\escort\EscortEntityListBuilder');
  }
  if (isset($entity_types['media'])) {
    $entity_types['media']->setHandlerClass('escort_list_builder', 'Drupal\escort\EscortEntityListBuilder');
  }
}

/**
 * Check if UX dialog module is installed.
 */
function escort_ux_dialog_exists() {
  return \Drupal::moduleHandler()->moduleExists('ux_dialog');
}

/**
 * Return the ajax class to use.
 */
function escort_ajax_class() {
  return escort_ux_dialog_exists() ? 'use-ux-ajax' : 'use-ajax';
}

/**
 * Return the ajax library to use.
 */
function escort_ajax_library() {
  return \Drupal::moduleHandler()->moduleExists('ux') ? 'ux/ux.ajax' : 'core/drupal.ajax';
}

/**
 * Return the dialog type to use.
 */
function escort_dialog_type() {
  return escort_ux_dialog_exists() ? 'ux_dialog' : 'modal';
}

/**
 * Return the dialog library to use.
 */
function escort_dialog_library() {
  return escort_ux_dialog_exists() ? 'ux_dialog/ux_dialog' : 'core/drupal.dialog.ajax';
}

/**
 * Implements hook_library_info_alter().
 */
function escort_library_info_alter(array &$libraries, $module) {
  if ($module === 'views' && isset($libraries['views.ajax'])) {
    $path = '/' . drupal_get_path('module', 'escort') . '/js/escort.aside.js';
    $libraries['views.ajax']['js'][$path] = ['minified' => TRUE];
  }
}
